[project]
name = "mcp-agent"
version = "0.1.27"
description = "Build effective agents with Model Context Protocol (MCP) using simple, composable patterns."
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Sarmad Qadri", email = "sarmad@lastmileai.dev" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent"
]
requires-python = ">=3.10"
dependencies = [
    "aiohttp>=3.11.13",
    "fastapi>=0.115.6",
    "jsonref>=1.1.0",
    "mcp>=1.13.1",
    "numpy>=2.1.3",
    "opentelemetry-distro>=0.50b0",
    "opentelemetry-exporter-otlp-proto-http>=1.29.0",
    "opentelemetry-instrumentation-anthropic>=0.39.3",
    "opentelemetry-instrumentation-openai>=0.39.3",
    "prometheus_client>=0.22.1",
    "prompt-toolkit>=3.0.50",
    "pydantic-settings>=2.7.0",
    "pydantic-yaml>=1.5.1",
    "pydantic>=2.10.4",
    "pyyaml>=6.0.2",
    "rich>=13.9.4",
    "scikit-learn>=1.6.0",
    "typer>=0.15.3",
    "websockets>=12.0",
]
[project.optional-dependencies]
temporal = [
    "temporalio[opentelemetry]>=1.10.0",
]
anthropic = [
    "anthropic>=0.48.0",
]
anthropic_bedrock = [
    "anthropic[bedrock]>=0.52.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.0",
    "pre-commit>=3.6.0",
]

[tool.uv.dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.0",
    "pre-commit>=3.6.0"
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
